#注册中心地址
register:
  host: 192.168.1.110
  port: 19999


server:
  host: 192.168.1.110  #本服务地址
  port: ${register.port} #端口号

spring:
  application:
    name: regServer   #应用名称服务名

eureka:
  # 注册中心 Eureka Server 一旦进入保护模式，
  # Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。
  # 此时需要配置关闭自我保护，并按需配置Eureka Server清理无效节点的时间间隔。
  # 这里的更改Eureka更新频率将打破服务器的自我保护功能，生产环境下不建议自定义这些配置。
#  server:
#    enable-self-preservation: false   # 设为false，关闭自我保护
#    eviction-interval-timer-in-ms:  4000  # 清理间隔（单位毫秒，默认是60*1000）
  instance:
    hostname: ${server.host}  #本服务地址，或者host映射主机名称 eurekaClient  #Eureka实例名，集群中根据这里相互识别
    # 开启IP注册
    preferIpAddress: true  #向eureka服务注册信息时，使用ip地址，默认使用的hostname注册
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}:${spring.application.name}  # 默认值 ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}} ，也就是机器主机名:应用名称:应用端口
    # 服务续约间隔时间
    lease-renewal-interval-in-seconds: 5      # 心跳时间，即服务续约间隔时间（缺省为30s）
    lease-expiration-duration-in-seconds: 10  # 发呆时间，即服务续约到期时间（缺省为90s）
  #客户端
  client:
    fetch-registry: false  #是否拉取服务列表，false只提供服务给别的服务。#设置是否从注册中心获取注册信息（缺省true）,这是一个单点的EurekaServer，不需要同步其它EurekaServer节点的数据，故设为false
    register-with-eureka: false  #设置是否将自己作为客户端注册到注册中心（缺省true），这里为不需要 #是否开启注册服务，因为这里如果为true表示自己注册自己，而自己就是一个服务注册方，没必要自己注册自己
    service-url:
      defaultZone: http://${register.host}:${register.port}/eureka/  #注册中心地址